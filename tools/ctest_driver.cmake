
set(CTEST_SOURCE_DIRECTORY ${SRC_DIR})
set(CTEST_BINARY_DIRECTORY ${BIN_DIR})

message(STATUS "${CTEST_SOURCE_DIRECTORY} ${CTEST_BINARY_DIRECTORY}")

cmake_host_system_information(RESULT HNAME QUERY HOSTNAME)

set(CTEST_TEST_TIMEOUT 3600) 

set(BUILD_STRING_GCC "xeon-linux-gcc-release")

set(CTEST_NOTES_FILES "${CTEST_BINARY_DIRECTORY}/note.json")

set(CTEST_SITE ${HNAME})
set(CTEST_BUILD_NAME ${BUILD_STRING})

set(CTEST_DROP_METHOD "http")

set(CTEST_DROP_SITE "129.217.165.75/CDash/public")
set(CTEST_DROP_LOCATION "/submit.php?project=Feat_FloWer")

set(CTEST_CMAKE_GENERATOR "Unix Makefiles")
set(CTEST_BUILD_CONFIGURATION "Profiling")
set(CTEST_BUILD_OPTIONS "-j 8 -DWITH_SSH1=ON -WITH_SFTP=ON -DWITH_SERVER=ON -DWITH_ZLIB=ON -DWITH_PCAP=ON -DWITH_GCRYPT=OFF")
#set(CTEST_BUILD_FLAGS -j 8)

message(STATUS "Drop site: ${CTEST_DROP_SITE}")
message(STATUS "Hostname: ${HNAME}")

set(WITH_MEMCHECK false)
set(WITH_COVERAGE false)

#######################################################################

#ctest_empty_binary_directory(${CTEST_BINARY_DIRECTORY})

find_program(CTEST_GIT_COMMAND NAMES git)
find_program(CTEST_COVERAGE_COMMAND NAMES gcov)
find_program(CTEST_MEMORYCHECK_COMMAND NAMES valgrind)

#set(CTEST_MEMORYCHECK_SUPPRESSIONS_FILE ${CTEST_SOURCE_DIRECTORY}/tests/valgrind.supp)

if(NOT EXISTS "${CTEST_SOURCE_DIRECTORY}")
  set(CTEST_CHECKOUT_COMMAND "${CTEST_GIT_COMMAND} clone --recursive ssh://rmuenste@lannister/home/user/git/Feat_FloWer.git")
endif()

#set(CTEST_UPDATE_COMMAND "git status")

#set(CTEST_CONFIGURE_COMMAND "${CMAKE_COMMAND} -DQ2P1_BUILD_ID:STRING=${BUILD_STRING_GCC} -DUSE_SYSTEM_BLASLAPACK=True -DBUILD_APPLICATIONS=True -DUSE_ODE=True -DCMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_CONFIGURATION}")
#set(CTEST_CONFIGURE_COMMAND "${CMAKE_COMMAND} -DQ2P1_BUILD_ID:STRING=${BUILD_STRING} -DUSE_MUMPS=True -DCMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_CONFIGURATION}")
#set(CTEST_CONFIGURE_COMMAND "${CMAKE_COMMAND} -DQ2P1_BUILD_ID:STRING=${BUILD_STRING} -DCMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_CONFIGURATION}")
#set(CTEST_CONFIGURE_COMMAND "${CMAKE_COMMAND} -DQ2P1_BUILD_ID:STRING=${BUILD_STRING} -DUSE_MUMPS=True -DCMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_CONFIGURATION}")
#set(CTEST_CONFIGURE_COMMAND "${CMAKE_COMMAND} -DQ2P1_BUILD_ID:STRING=${BUILD_STRING} -DUSE_MUMPS=True -DCMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_CONFIGURATION}")
#set(CTEST_CONFIGURE_COMMAND "${CMAKE_COMMAND} -DQ2P1_BUILD_ID:STRING=${BUILD_STRING_GCC} -DUSE_SYSTEM_BLASLAPACK=True -DBUILD_APPLICATIONS=True -DCMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_CONFIGURATION}")
set(CTEST_CONFIGURE_COMMAND "${CMAKE_COMMAND} -DQ2P1_BUILD_ID:STRING=${BUILD_STRING} -DCMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_CONFIGURATION}")

set(CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} -DWITH_TESTING:BOOL=ON ${CTEST_BUILD_OPTIONS}")
set(CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} \"-G${CTEST_CMAKE_GENERATOR}\"")
set(CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} \"${CTEST_SOURCE_DIRECTORY}\"")

ctest_start("Experimental")
#ctest_update()
ctest_configure()
ctest_build()
ctest_test()
if (WITH_COVERAGE AND CTEST_COVERAGE_COMMAND)
  ctest_coverage()
endif (WITH_COVERAGE AND CTEST_COVERAGE_COMMAND)
if (WITH_MEMCHECK AND CTEST_MEMORYCHECK_COMMAND)
  ctest_memcheck()
endif (WITH_MEMCHECK AND CTEST_MEMORYCHECK_COMMAND)

EXECUTE_PROCESS(COMMAND python ./join_notes.py ${BIN_DIR})

ctest_submit()
